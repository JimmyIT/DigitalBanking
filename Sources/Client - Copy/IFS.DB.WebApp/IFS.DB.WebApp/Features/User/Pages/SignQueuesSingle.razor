@layout SignQueuesLayout
@page "/sign-queues/payment/single"
@using IFS.DB.WebApp.Models.SigningQueue
@using IFS.DB.WebApp.Models

<div class="sign-queues-single-layout">
    <div class="sign-queues-single-container">
        <div class="sign-queues-single">
            <div class="sign-queues-single-header">
                <div class="sign-queues-single-header-breadcrumbs">
                    <p class="sign-queues-single-header-breadcrumbs__item">Sign Queues</p>
                    <p class="sign-queues-single-header-breadcrumbs__item">Payments</p>
                    <p class="sign-queues-single-header-breadcrumbs__item active">@_paymentQueue.UserReference</p>
                </div>

                <div class="sign-queues-single-header-title">
                    <div class="sign-queues-single-header-title-line">
                        <img src="/img/icons/return.svg" alt="return" class="sign-queues-single-header-title-line__return-icon"/>
                        <p class="sign-queues-single-header-title-line-name">@_paymentQueue.UserReference</p>
                    </div>
                </div>
            </div>

            <div class="sign-queues-single-card">
                <div class="sign-queues-single-card-info">
                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Template Reference</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.TemplateReference</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Default Account</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.DefaultAccount</p>
                    </div>
                </div>

                <hr class="sign-queues-single-card-dash"/>

                <p class="sign-queues-single-card-title">Payeeâ€™s Details</p>
                <div class="sign-queues-single-card-info">
                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Sort Code</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.SortCode</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Account name</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.AccountName</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Account number</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.AccountNumber</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Payee Reference</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.PayeeReference</p>
                    </div>
                </div>

                <hr class="sign-queues-single-card-dash"/>

                <p class="sign-queues-single-card-title">Other details</p>
                <div class="sign-queues-single-card-info">
                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Debit Account</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.DebitAccount</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">User Reference</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.UserReference</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Payment Date</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.PaymentDate</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Attached files</p>
                        <p class="sign-queues-single-card-info-item-text"><img src="/img/sign/file.svg" alt="file" class="sign-queues-single-card-info-item-text__image"/>Screenshot.pdf</p>
                    </div>
                </div>

                <div class="sign-queues-single-card-info">
                    <div class="sign-queues-single-card-info-item sign-queues-single-card-info-item--fullwidth">
                        <p class="sign-queues-single-card-info-item-title">Debit Narrative</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.DebitNarrative</p>
                    </div>

                    <div class="sign-queues-single-card-info-item">
                        <p class="sign-queues-single-card-info-item-title">Default Credit Narrative</p>
                        <p class="sign-queues-single-card-info-item-text">@_paymentQueue.DefaultCreditNarrative</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<footer class="sign-queues-footer-layout">
    <div class="sign-queues-footer-container">
        <div class="sign-queues-footer">
            <div class="sign-queues-footer-left">
                <div class="sign-queues-footer-left-total">
                    <p class="sign-queues-footer-left-total-text">Total Required</p>
                    <p class="sign-queues-footer-left-total-text">@_paymentQueue.TotalSignOff</p>
                </div>

                <div class="sign-queues-footer-left-awaiting">
                    <p class="sign-queues-footer-left-awaiting-text">Awaiting Sign-off </p>
                    <p class="sign-queues-footer-left-awaiting-text">@_paymentQueue.AwaitingSignOff</p>
                </div>
            </div>

            <div class="sign-queues-footer-right">
                <div class="sign-queues-footer-right-batch">
                    <p class="sign-queues-footer-right-batch-text">Batch Amount:</p>
                    <p class="sign-queues-footer-right-batch-text">$1500.00</p>
                </div>

                <div class="sign-queues-footer-right-act">
                    <button class="sign-queues-footer-right-act-reject" @onclick="Reject">Reject</button>
                    <button class="sign-queues-footer-right-act-sign" @onclick="SignOff">Sign Off</button>
                </div>
            </div>
        </div>
    </div>
</footer>

@code {

    [CascadingParameter]
    public IModalService ModalSvc { get; set; }

    private PaymentQueueModel _paymentQueue;

    public SignQueuesSingle()
    {
        _paymentQueue = new PaymentQueueModel();
    }

    protected override void OnInitialized()
    {
        if (_appStore.PaymentQueueStore is {})
        {
            _paymentQueue = _appStore.PaymentQueueStore;
        }
        else
        {
            _navigateManager.NavigateTo("/sign-queues/payment");
        }
    }

    private async Task Reject()
    {
        var modalParameters = new ModalParameters
        {
            { nameof(SimplePasswordConfirmModalComponent.HeaderTitle), $"Reject {_paymentQueue.UserReference}" },
            { nameof(SimplePasswordConfirmModalComponent.HeaderSubtitle), "Please enter your password to confirm payment rejection" },
            { nameof(SimplePasswordConfirmModalComponent.IsNegative), true },
            { nameof(SimplePasswordConfirmModalComponent.ConfirmText), "Reject" }
        };

        IModalReference modal = ModalSvc.Show<SimplePasswordConfirmModalComponent>(
            title: string.Empty,
            parameters: modalParameters,
            new ModalOptions
            {
                UseCustomLayout = true
            });

        ModalResult confirmModalResult = await modal.Result;

        if (confirmModalResult.Confirmed is false)
            return;

        var index = FakeData.PaymentQueues.FindIndex(x => x.Id == _paymentQueue.Id);

        if (index == -1) throw new InvalidOperationException("");

        _paymentQueue.AwaitingSignOff -= 1;
        _paymentQueue.CanSign = false;

        if (_paymentQueue.AwaitingSignOff == 0)
        {
            FakeData.PaymentQueues.RemoveAt(index);
        }
        else
        {
            FakeData.PaymentQueues[index] = _paymentQueue 
                with { };
        }

        ModalSvc.Show<SimpleAnnouncementModalComponent>(
            title: string.Empty,
            new ModalParameters
            {
                { nameof(SimpleAnnouncementModalComponent.HeaderTitle), "Rejection confirmed" },
                { nameof(SimpleAnnouncementModalComponent.OnClose), EventCallback.Factory.Create(this, () => _navigateManager.NavigateTo("/sign-queues/payment")) },
            },
            new ModalOptions
            {
                UseCustomLayout = true
            });
    }

    private async Task SignOff()
    {
        var modalParameters = new ModalParameters
        {
            { nameof(SimplePasswordConfirmModalComponent.HeaderTitle), $"Sign of {_paymentQueue.UserReference}" },
            { nameof(SimplePasswordConfirmModalComponent.HeaderSubtitle), "Please enter your password to confirm payment Sign off" },
            { nameof(SimplePasswordConfirmModalComponent.ConfirmText), "Sign off" }
        };

        IModalReference modal = ModalSvc.Show<SimplePasswordConfirmModalComponent>(
            title: string.Empty,
            parameters: modalParameters,
            new ModalOptions
            {
                UseCustomLayout = true
            });

        ModalResult confirmModalResult = await modal.Result;

        if (confirmModalResult.Confirmed is false)
            return;

        var index = FakeData.PaymentQueues.FindIndex(x => x.Id == _paymentQueue.Id);

        if (index == -1) throw new InvalidOperationException("");

        _paymentQueue.AwaitingSignOff -= 1;
        _paymentQueue.CanSign = false;

        if (_paymentQueue.AwaitingSignOff == 0)
        {
            FakeData.PaymentQueues.RemoveAt(index);
        }
        else
        {
            FakeData.PaymentQueues[index] = _paymentQueue 
                with { };
        }

        ModalSvc.Show<SimpleAnnouncementModalComponent>(
            title: string.Empty,
            new ModalParameters
            {
                { nameof(SimpleAnnouncementModalComponent.HeaderTitle), "Sign-off confirmed" },
                { nameof(SimpleAnnouncementModalComponent.HeaderSubTitle), "The reference was confirmed" },
                { nameof(SimpleAnnouncementModalComponent.OnClose), EventCallback.Factory.Create(this, () => _navigateManager.NavigateTo("/sign-queues/payment")) },
            },
            new ModalOptions
            {
                UseCustomLayout = true
            });
    }

}