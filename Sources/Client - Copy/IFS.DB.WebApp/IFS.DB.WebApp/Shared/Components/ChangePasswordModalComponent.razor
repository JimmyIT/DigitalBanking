@using IFS.DB.WebApp.Helpers.FieldCssClassProviders
@using IFS.DB.WebApp.Models
@using IFS.DB.WebApp.Models.Users
<div class="modal-layout" id="ModalConfirm" style="display:block!important">
    <div class="modal-scroll">
        <div class="modal-background" @onclick=@Cancel></div>
        <div class="common-modal-layout">
            <div class="common-modal">
                <div class="common-modal-header-wrapper">
                    <div class="common-modal-header">
                        <p class="common-modal-header__title">
                            Change Password
                        </p>
                        <div class="common-modal-header__icon" @onclick=@Cancel>
                            <img class="icon" src="/img/icons/closeIcon.svg" alt="close" />
                            <img class="iconHover" src="/img/icons/closeIconHover.svg" alt="close" />
                        </div>
                    </div>
                </div>

                <div class="common-modal-main">
                    <EditForm EditContext=@_changePasswordContext>
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="main-formblock">
                            <div class="main-formrow formrow">
                                <div class="modal-main-input formgroup">
                                    <label>Current Password</label>
                                    <div class="password">
                                        <InputText @bind-Value="@_changePasswordRequestModel.CurrentPassword"
                                                   placeholder="Enter here"
                                                   class="input"
                                                   id="currentPassword" type="@(_showPassword ? "text" : "password")"></InputText>
                                        <div class="password__icon" id="passwordIcon" @onclick=@(() => _showPassword = !_showPassword)>
                                            @if (_IsCorrectPassword)
                                            {
                                                <img class="icon" src="@(_showPassword ? "/img/icons/eyeIcon.svg" : "/img/icons/closeEyeIcon.svg")" alt="close" />
                                                <img class="iconHover" src="@(_showPassword ? "/img/icons/eyeIconHover.svg" : "/img/icons/closeEyeIconHover.svg")" alt="close" />
                                            }
                                            else
                                            {
                                                <img class="icon" src="@(_showPassword ? "/img/icons/openEyeRedIcon.svg" : "/img/icons/eyeRedIcon.svg")" alt="close" />
                                            }
                                        </div>
                                    </div>
                                    <div class="input-alert" id="inputAlert" style="display:block!important;">
                                        <CustomValidationMessage For="@(() => _changePasswordRequestModel.CurrentPassword)"></CustomValidationMessage>
                                    </div>
                                </div>
                                <!---->
                                <!---->
                                <div class="modal-main-input formgroup">
                                    <label>New Password</label>
                                    <div class="password">
                                        <InputText @bind-Value="@_changePasswordRequestModel.NewPassword"
                                                   placeholder="Enter here"
                                                   class="input"
                                                   id="currentPassword" type="@(_showPassword ? "text" : "password")"></InputText>

                                        <div class="password__icon" id="passwordIcon" @onclick=@(() => _showPassword = !_showPassword)>
                                            @if (_IsCorrectPassword)
                                            {
                                                <img class="icon" src="@(_showPassword ? "/img/icons/eyeIcon.svg" : "/img/icons/closeEyeIcon.svg")" alt="close" />
                                                <img class="iconHover" src="@(_showPassword ? "/img/icons/eyeIconHover.svg" : "/img/icons/closeEyeIconHover.svg")" alt="close" />
                                            }
                                            else
                                            {
                                                <img class="icon" src="@(_showPassword ? "/img/icons/openEyeRedIcon.svg" : "/img/icons/eyeRedIcon.svg")" alt="close" />
                                            }
                                        </div>
                                    </div>
                                    <div class="input-alert" id="inputAlert" style="display:block!important;">
                                        <CustomValidationMessage For="@(() => _changePasswordRequestModel.NewPassword)"></CustomValidationMessage>
                                    </div>
                                </div>
                                <!---->
                                <!---->
                                <div class="modal-main-input formgroup">
                                    <label>New password (one more time)</label>
                                    <div class="password">
                                        <InputText @bind-Value="@_changePasswordRequestModel.ConfirmNewPassword"
                                                   placeholder="Enter here"
                                                   class="input"
                                                   id="currentPassword" type="@(_showPassword ? "text" : "password")"></InputText>

                                        <div class="password__icon" id="passwordIcon" @onclick=@(() => _showPassword = !_showPassword)>
                                            @if (_IsCorrectPassword)
                                            {
                                                <img class="icon" src="@(_showPassword ? "/img/icons/eyeIcon.svg" : "/img/icons/closeEyeIcon.svg")" alt="close" />
                                                <img class="iconHover" src="@(_showPassword ? "/img/icons/eyeIconHover.svg" : "/img/icons/closeEyeIconHover.svg")" alt="close" />
                                            }
                                            else
                                            {
                                                <img class="icon" src="@(_showPassword ? "/img/icons/openEyeRedIcon.svg" : "/img/icons/eyeRedIcon.svg")" alt="close" />
                                            }
                                        </div>
                                    </div>
                                    <div class="input-alert" id="inputAlert" style="display:block!important;">
                                        <CustomValidationMessage For="@(() => _changePasswordRequestModel.ConfirmNewPassword)"></CustomValidationMessage>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>

                <div class="common-modal-footer">
                    <button class="common-modal-footer__buttonCancel" @onclick=@Cancel @onclick:preventDefault>
                        Cancel
                    </button>
                    <button class="common-modal-footer__buttonSuccess" type="button" @onclick=@ChangePasswordAsync @onclick:preventDefault>
                        Save updates
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private EditContext _changePasswordContext;
    private ValidationMessageStore _validateMsgStore;
    private ChangePasswordRequestModel _changePasswordRequestModel = new ChangePasswordRequestModel();
    private bool _showPassword = false;
    private bool _IsCorrectPassword = false;
    private async Task Cancel() => await BlazoredModal.CancelAsync();
    private async Task Ok() => BlazoredModal.CloseAsync(ModalResult.Ok(true));

    protected override async Task OnInitializedAsync()
    {
        _changePasswordContext = new EditContext(_changePasswordRequestModel);
        _changePasswordContext.SetFieldCssClassProvider(new CustomFieldClassProvider());
        _validateMsgStore = new ValidationMessageStore(_changePasswordContext);
        _changePasswordContext.OnFieldChanged += (_, args) => { _validateMsgStore.Clear(args.FieldIdentifier); };
    }

    private async Task ChangePasswordAsync()
    {
        if (!string.IsNullOrEmpty(_changePasswordRequestModel.CurrentPassword) && !_changePasswordRequestModel.CurrentPassword.Equals(FakeData.Password))
        {
            _validateMsgStore.Add(_changePasswordContext.Field("CurrentPassword"), "Curren password is not correct.");
            _changePasswordContext.NotifyValidationStateChanged();
            StateHasChanged();
            return;
        }

        if(!_changePasswordContext.Validate())
        {
            return;
        }

        await Ok();
    }
}