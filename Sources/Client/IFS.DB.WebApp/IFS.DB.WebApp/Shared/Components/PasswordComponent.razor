<div class="auth-box-numbers">
    <p class="auth-box-numbers__label">@L["password_instruction"]</p>
    @if (PasswordLength <= 10)
    {
        <div class="auth-box-numbers-row">
            @for (int position = 0, indexOfPos = -1; position < PasswordLength; position++)
            {
                if (_positions.Contains(position))
                {
                    var temp = position + 1;
                    indexOfPos += 1;
                    <input 
                       type="password"
                       @ref="@InputRef"
                       class="auth-box-number-input @(IsSubmitting && string.IsNullOrEmpty(_passwordDict.GetValueOrDefault(temp)) || ShowInvalid ? "error" : "")"
                       maxlength="1"
                       value="@_passwordDict.GetValueOrDefault(temp)"
                       @onchange="@OnPasswordInputChanged(temp)"
                       @onkeyup="@FocusNext(indexOfPos, temp)"
                       />
                }
                else
                {
                    <div class="auth-box-number-star disabled">
                        <img class="auth-box-number-input__image" src="/img/icons/asterix.svg" alt="asterix" />
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="auth-box-numbers-col">
            @for (int position = 0, indexOfPos = -1; position < _positions.Count; position++)
            {
                var temp = position + 1;
                indexOfPos += 1;
                <div class="single-auth-box">
                    <label class="single-auth-box__label">Enter the @OrdinalNumber((uint)temp) character</label>
                    <input 
                        type="password"
                        maxlength="1"
                        @ref="@InputRef"
                        class="single-auth-box-input  @(IsSubmitting && string.IsNullOrEmpty(_passwordDict.GetValueOrDefault(temp)) || ShowInvalid ? "error" : "")"
                        @onchange="@OnPasswordInputChanged(temp)"
                        @onkeyup="@FocusNext(indexOfPos, temp)"
                        value="@_passwordDict.GetValueOrDefault(temp)" />
                </div>
            }

        </div>
    }

</div>

@code {

    [Parameter, EditorRequired]
    public int PasswordLength { get; set; }

    [Parameter]
    public bool IsSubmitting { get; set; }

    [Parameter]
    public Dictionary<int, string>? PasswordDict { get; set; }

    [Parameter]
    public EventCallback<Dictionary<int, string>> PasswordDictChanged { get; set; }

    [Parameter]
    public bool ShowInvalid { get; set; }

    private ElementReference InputRef
    {
        set => _inputRefs.Add(value); 
    }
        
    private List<ElementReference> _inputRefs = new();

    private List<int> _positions = new();

    private Dictionary<int, string> _passwordDict = new();

    private Func<int, Action<ChangeEventArgs>> OnPasswordInputChanged => key => async args =>
    {
        _passwordDict[key] = args.Value!.ToString()!;
        
        if (PasswordDictChanged.HasDelegate)
        {
            await PasswordDictChanged.InvokeAsync(_passwordDict);
        }
    };

    private Func<int, int, Action<KeyboardEventArgs>> FocusNext => (index, key) => async args =>
    {
        if (args.Code == "Backspace" && index > 0)
        {
            await _inputRefs[index - 1].FocusAsync();
            return;
        }
            
        if ( new[]
        {
            "Enter", 
            "Delete", 
            "Tab", 
            "Backspace", 
            "ShiftLeft", 
            "ShiftRight", 
            "ControlLeft", 
            "ControlRight", 
            "Escape",
            "CapsLock"
        }.Contains(args.Code))
            return;
        
        if (index < 2)
        {
            await _inputRefs[index + 1].FocusAsync();
        }
    };


    protected override void OnInitialized()
    {
        var rnd = new Random();
        while (_positions.Count < 3)
        {
            var nextPosition = rnd.Next(PasswordLength);
            if (!_positions.Contains(nextPosition))
            {
                _positions.Add(nextPosition);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _inputRefs[0].FocusAsync();
        }
    }

    private string OrdinalNumber(uint number) => number switch
    {
        0 => "N/A",
        1 => "1st",
        2 => "2nd",
        3 => "3rd",
        _ => $"{number}th"
    };

}