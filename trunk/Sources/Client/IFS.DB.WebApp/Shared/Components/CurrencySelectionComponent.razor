@using IFS.DB.WebApp.Models
@using IFS.DB.WebApp.Models.Currency

@typeparam TValue
@inherits InputSelect<TValue>

@if (!string.IsNullOrEmpty(Label))
{
    <label>@Label</label>
}

<InputSelect 
    Value="Value" 
    class="select"
    ValueChanged="async (TValue value) => await OnValueChangedInternal(value)" 
    ValueExpression=@ValidationFor>
    <option value="">@DefaultOption</option>
    @foreach (var item in _listCurrencies ?? Enumerable.Empty<CurrencyModel>())
    {
        <option value="@item.Code">@item.Code</option>
    }
</InputSelect>

@*<div class="customSelector">
    <div class="customSelector-input" @onclick="@(() => OnClickFilterIcon())" id="filtersSelector">
            <p class="customSelector-input__placeholder admin-box-selections-customer-name">
                @if (!string.IsNullOrEmpty(_selectedCurrecy))
                    @_selectedCurrecy
                else
                    @DefaultOption

            </p>
            <img src="/img/icons/dropdown.svg" alt="dropdown" class="admin-box-selections-customer-icon" />
        </div>

        <div class="customSelector-dropdown" id="filters" style="@_styleActiveSelection">
            @if (_listCurrencies != null)
            {
                @foreach (var currency in _listCurrencies)
                {
                    <div class="customSelector-dropdown-item" @onclick="@(() => OnSelectedValue(currency.Code))">
                        <p>@currency.Code</p>
                    </div>
                }
            }
    </div>
</div>*@

@if (!string.IsNullOrEmpty(Description))
{
    <p class="underline-text">@Description</p>
}

<CustomValidationMessage For="ValidationFor"></CustomValidationMessage>

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string DefaultOption { get; set; } = "Select";
    [Parameter] public string Description { get; set; }
    [Parameter] public EventCallback<TValue>? OnValueChanged { get; set; }
    [Parameter, EditorRequired] public Expression<Func<TValue>> ValidationFor { get; set; } = default!;

    private string _selectedCurrecy = string.Empty;
    private bool _isActiveSelection = false;
    private string _styleActiveSelection = "display:none;";

    private List<CurrencyModel>? _listCurrencies;
    protected override async Task OnInitializedAsync()
    {
        _listCurrencies = FakeData.Currencies;
        //if (!string.IsNullOrEmpty(CurrentValueAsString))
        //    await OnSelectedValue(CurrentValueAsString);
    }

    private async Task OnValueChangedInternal(TValue value)
    {
        Value = value;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(value)!;

    }

    private async Task OnClickFilterIcon()
    {
        _isActiveSelection = !_isActiveSelection;
        await OnDropdownItemStateChange(_isActiveSelection);
    }

    private async Task OnDropdownItemStateChange(bool isActve)
    {
        if (isActve)
        {
            _isActiveSelection = isActve;
            _styleActiveSelection = "display:block;";
        }
        else
        {
            _isActiveSelection = false;
            _styleActiveSelection = "display:none;";
        }
    }

    private async Task OnSelectedValue(string value)
    {
        _selectedCurrecy = value;
        await OnDropdownItemStateChange(false);
    }
}