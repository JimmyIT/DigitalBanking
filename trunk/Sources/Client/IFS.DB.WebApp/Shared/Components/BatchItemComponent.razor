@using IFS.DB.WebApp.Models.Batch
@using IFS.DB.WebApp.Models.Account
@using IFS.DB.WebApp.Helpers.FieldCssClassProviders
@using IFS.DB.WebApp.Helpers.FieldCssClassProviders
@using IFS.DB.WebApp.Helpers.FluentValidator
@using IFS.DB.WebApp.Features.User.Pages
@using Z.Core.Extensions

<div class="batch-items-card" style="@(IsHeaderEditing ? "background: #FAFAFB" : "")" id="card">
    <div class="batch-items-card-header" @onclick="@(OnSelect)">
        <p class="batch-items-card-header__title">Item No. @(ItemNo + 1)</p>
        @if (EditMode is false)
        {
            <div class="batch-items-card-header-info">
                <p class="batch-items-card-header__sum @(IsHeaderEditing ? "batch-items-card-header__sum--inactive" : "")" id="cardSum">@Item.Amount.ToNumberFormat()</p>
                <p class="batch-items-card-header__type @(Item.TransactionType switch{
                                                            TransactionType.Transfer => "batch-items-card-header__type--transfer",
                                                            TransactionType.Payment => "batch-items-card-header__type--payment",
                                                            _ => "batch-items-card-header__type--payment"
                                                            }) @(IsHeaderEditing ? "batch-items-card-header__type--inactive" : "")" id="cardType">
                    @Item.TransactionType.ToString()
                </p>
                <p class="batch-items-card-header__label @(IsHeaderEditing ? "batch-items-card-header__label--inactive" : "")" id="cardLabel">Account No. @Item.CreditAccount</p>
            </div>
        }
        else
        {
            <img src="@(IsHeaderEditing ? "/img/icons/deleteInactiveIcon.svg" : "/img/icons/delete.svg")" alt="delete" id="cardHeaderIcon" style="cursor: pointer" @onclick:stopPropagation onclick="@DeleteSelf"/>
        }
    </div>

    <div class="batch-items-card-form  @(EditMode ? "active" : "")" id="cardContent">
        <EditForm EditContext="_editCtx">
            <EnableFluentValidator TValidator="BatchItemModelValidator" MessageStore="_validationMessageStore"/>
            <div class="formgroup batch-items-card-form-row">
                <div class="formgroup">
                    <label>Transaction type</label>
                    <InputSelectEnum @bind-Value="@Item.TransactionType"
                                     disabled="@(IsHeaderEditing)"
                                     DefaultOption="Select"
                                     class="select">
                    </InputSelectEnum>
                    <CustomValidationMessage For="@(() => Item.TransactionType)"/>
                    <p class="batch-items-card-form-row__label">You can select betwen Payment and Transfer types</p>
                </div>
                <div class="formgroup">
                    <label>Credit Account</label>
                    <InputSelect
                        Value="Item.CreditAccount"
                        ValueExpression="@(() => Item.CreditAccount)"
                        ValueChanged="@(value => Item.CreditAccount = string.IsNullOrEmpty(value) ? null : value)"
                        disabled="@(IsHeaderEditing)"
                        TValue="string"
                        class="select">
                        <option value="">Select</option>
                        @foreach (AccountModel item in Accounts)
                        {
                            <option value="@item.AccountNumber">@item.AccountDescription</option>
                        }
                    </InputSelect>
                    <CustomValidationMessage For="@(() => Item.CreditAccount)"></CustomValidationMessage>
                    <p class="batch-items-card-form-row__label">Select an acount to which you want make transfers</p>
                </div>
                <div class="formgroup">
                    <label>Amount</label>
                    <AmountComponent
                        @bind-Value="@Item.Amount"
                        class="input payments-information-form__amount"
                        disabled="@(IsHeaderEditing)"
                        ValidationFor="@(() => Item.Amount)">
                    </AmountComponent>
                    <p class="batch-items-card-form-row__label">Batch Amount can not be higher than General Amount</p>
                </div>
            </div>

            <div class="batch-items-card-form-textarea">
                <div class="formgroup">
                    <label>Credit Narrative</label>
                    <div class="input-layout">
                        <InputTextArea placeholder="Enter here"  disabled="@(IsHeaderEditing)" class="input" @bind-Value="Item.CreditNarrative"></InputTextArea>
                    </div>
                    <CustomValidationMessage For="@(() => Item.CreditNarrative)"></CustomValidationMessage>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [CascadingParameter]
    public BatchMaintenanceNew Owner { get; set; } = default!;

    [Parameter, EditorRequired]
    public BatchItemModel Item { get; set; } = default!;

    [Parameter, EditorRequired]
    public List<AccountModel> Accounts { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<BatchItemModel> OnDelete { get; set; }

    [Parameter]
    public bool IsHeaderEditing { get; set; }

    [Parameter]
    public int ItemNo { get; set; }

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public EventCallback<(int?, BatchItemModel?)> OnSelected { get; set; }

    [Parameter]
    public EventCallback TriggerCalculateTotalAmount { get; set; }

    private EditContext _editCtx = default!;
    private ValidationMessageStore _validationMessageStore = default!;
    private ValidationMessageStore _extrasValidationMessageStore = default!;

    protected override void OnInitialized()
    {
        _editCtx = new EditContext(Item);
        _editCtx.SetFieldCssClassProvider(new CustomFieldClassProvider());
        _validationMessageStore = new ValidationMessageStore(_editCtx);
        _extrasValidationMessageStore = new ValidationMessageStore(_editCtx);

        _editCtx.OnFieldChanged += editCtxOnOnFieldChanged;
        _editCtx.OnValidationRequested += editCtxOnOnValidationRequested;

        Owner.AddChildContext(ItemNo, _editCtx);
    }

    protected override void OnParametersSet()
    {
        if (IsHeaderEditing)
        {
            _validationMessageStore.Clear();
            _extrasValidationMessageStore.Clear();
        }
    }

    private void editCtxOnOnFieldChanged(object? sender, FieldChangedEventArgs args)
    {
        TriggerCalculateTotalAmount.InvokeAsync();
        _extrasValidationMessageStore.Clear(args.FieldIdentifier);
        if (args.FieldIdentifier.FieldName.Equals(nameof(BatchItemModel.Amount)))
        {
            ExtrasValidateAmount();
        }
    }

    private void editCtxOnOnValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _extrasValidationMessageStore.Clear();
        ExtrasValidateAmount();
    }

    private void ExtrasValidateAmount()
    {
        if (Owner.IsExceeded)
        {
            _extrasValidationMessageStore.Add(_editCtx.Field(nameof(BatchItemModel.Amount)), "Total Exceeded!");
        }
    }

    private async Task DeleteSelf()
    {
        if (IsHeaderEditing) return;
        await OnDelete.InvokeAsync(Item);
        await TriggerCalculateTotalAmount.InvokeAsync();
    }

    private void ValidateAmountWithTotalAmount(FieldChangedEventArgs args)
    {
        if (args.FieldIdentifier.Model is BatchItemModel model)
        {
        }
    }

    private void Submit()
    {
        if (!_editCtx.Validate())
            return;
    }

    private void OnSelect()
    {
        if (IsHeaderEditing) return;
        
        if (EditMode)
        {
            if (!_editCtx.Validate())
                return;

            OnSelected.InvokeAsync((null, null));
            return;
        }
            
        OnSelected.InvokeAsync((ItemNo, Item));
    }

}