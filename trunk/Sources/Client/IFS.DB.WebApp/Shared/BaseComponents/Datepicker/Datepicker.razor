@namespace IFS.DB.WebApp.Shared.BaseComponents.Datepicker

@inherits InputBase<TValue>
@implements IAsyncDisposable
@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis
@typeparam TValue

<div class="datepicker">
    <img src="/img/icons/calendar.svg" alt="search" class="datepicker__icon"/>
    <input
        @attributes="@AdditionalAttributes"
        type="@_typeAttributeValue"
        class="input datepicker__input @CssClass"
        value="@BindConverter.FormatValue(CurrentValueAsString)"
        @onchange="EventCallback.Factory.CreateBinder<string?>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)"
        @ref="Element"/>
</div>
        @* @onfocus="EventCallback.Factory.Create(this, ShowDatePicker)" *@

@code {

        private const string DateFormat = "yyyy-MM-dd"; // Compatible with HTML 'date' inputs
        private const string DateTimeLocalFormat = "yyyy-MM-ddTHH:mm:ss"; // Compatible with HTML 'datetime-local' inputs
        private const string MonthFormat = "yyyy-MM"; // Compatible with HTML 'month' inputs
        private const string TimeFormat = "HH:mm:ss"; // Compatible with HTML 'time' inputs

    private string _typeAttributeValue = default!;
    private string _format = default!;
    private string _parsingErrorMessage = default!;

    private IJSObjectReference _jsModule;
    private DotNetObjectReference<Datepicker<TValue>> _dotnetRef;

    [Parameter]
    public InputDateType Type { get; set; } = InputDateType.Date;

    [Parameter]
    public string ParsingErrorMessage { get; set; } = string.Empty;

    public ElementReference? Element { get; protected set; } = default!;

    public Datepicker()
    {
        Type type = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);

        if (type != typeof(DateTime) &&
            type != typeof(DateTimeOffset) &&
            type != typeof(DateOnly) &&
            type != typeof(TimeOnly))
        {
            throw new InvalidOperationException($"Unsupported {GetType()} type param '{type}'.");
        }
    }

    protected override void OnInitialized()
    {
        _dotnetRef = DotNetObjectReference.Create(this);
    }

    protected override void OnParametersSet()
    {
        (_typeAttributeValue, _format, var formatDescription) = Type switch
        {
            InputDateType.Date => ("date", DateFormat, "date"),
            InputDateType.DateTimeLocal => ("datetime-local", DateTimeLocalFormat, "date and time"),
            InputDateType.Month => ("month", MonthFormat, "year and month"),
            InputDateType.Time => ("time", TimeFormat, "time"),
            _ => throw new InvalidOperationException($"Unsupported {nameof(InputDateType)} '{Type}'.")
            };

        _parsingErrorMessage = string.IsNullOrEmpty(ParsingErrorMessage)
            ? $"The {{0}} field must be a {formatDescription}."
            : ParsingErrorMessage;
    }

    protected override string FormatValueAsString(TValue? value)
    {
        var returnValue = value switch
        {
            DateTime dateTimeValue => BindConverter.FormatValue(dateTimeValue, _format, CultureInfo.InvariantCulture),
            DateTimeOffset dateTimeOffsetValue => BindConverter.FormatValue(dateTimeOffsetValue, _format, CultureInfo.InvariantCulture),
            DateOnly dateOnlyValue => BindConverter.FormatValue(dateOnlyValue, _format, CultureInfo.InvariantCulture),
            TimeOnly timeOnlyValue => BindConverter.FormatValue(timeOnlyValue, _format, CultureInfo.InvariantCulture),
            _ => string.Empty, // Handles null for Nullable<DateTime>, etc.
            };

        return returnValue;
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo(value, CultureInfo.InvariantCulture, out result))
        {
            Debug.Assert(result != null);
            validationErrorMessage = null;
            return true;
        }
        validationErrorMessage = string.Format(CultureInfo.InvariantCulture, _parsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", $"./js/modules/Datepicker.js");
            // await _jsModule.InvokeVoidAsync("setDotnetRef", _dotnetRef);
            // await _jsModule.InvokeVoidAsync("setDomRef", Element);
            await ShowDatePicker();
        }
    }

    private async Task ShowDatePicker() => await _jsModule.InvokeVoidAsync("showDatepicker", Element, _dotnetRef, CurrentValue);

    [JSInvokable]
    public async Task SetDatetimeValue(string start, string end, string label)
    {
        CurrentValueAsString = start;
        EditContext.NotifyValidationStateChanged();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _dotnetRef.Dispose();
        }

        base.Dispose(disposing);
    }

    public async ValueTask DisposeAsync()
    {
        await _jsModule.DisposeAsync();
    }

}