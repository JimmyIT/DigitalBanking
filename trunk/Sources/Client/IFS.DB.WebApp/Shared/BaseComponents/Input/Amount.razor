@inherits InputBase<TValue>
@typeparam TValue

<input @attributes="AdditionalAttributes"
       class="input @CssClass"
       style="text-align: right"
       @bind="@_stringValue"
       @bind:event="oninput"
       @oninput:preventDefault="true"
       @onchange="OnValueChanged"/>

@code {
    
    [Parameter]
    public int NumberPrecision { get; set; } = 2;

    private string? _stringValue;
    private string? _currentValue;
    private string? _format;

    protected override void OnInitialized()
    {
        _stringValue = FormatValueAsString(Value);
        _format = $"N{NumberPrecision}";
    }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        _currentValue = e.Value?.ToString();

        await Task.Yield();

        var numberValue = GetNumbers(_currentValue);
        if (!BindConverter.TryConvertTo<TValue>(numberValue, CultureInfo.CurrentCulture, out TValue? value))
        {
            _stringValue = "";
            CurrentValueAsString = _currentValue;
        }
        else
        {
            CurrentValueAsString = numberValue;
            _stringValue = CurrentValueAsString;
        }

        StateHasChanged();
    }

    // Necessary override for InputBase
    protected override bool TryParseValueFromString(string? value, out TValue result, out string validationErrorMessage)
    {
        var val = GetNumbers(value);

        if (BindConverter.TryConvertTo<TValue?>(val, CultureInfo.CurrentCulture, out result))
        {
            validationErrorMessage = string.Empty;
            return true;
        }
        CurrentValue = default;

        validationErrorMessage = string.Empty;
        return false;
    }

    private static string GetNumbers(string? input)
        => new(!string.IsNullOrEmpty(input) ? input.Where(c => (char.IsDigit(c)) || c.Equals('.') || c.Equals(',')).ToArray() : "");

    protected override string? FormatValueAsString(TValue? value)
    {
        NumberFormatInfo numberFormatInfo = CultureInfo.CurrentCulture.NumberFormat;
        return value switch
        {
            int @int => @int.ToString(_format, numberFormatInfo),
            long @long => @long.ToString(_format, numberFormatInfo),
            short @short => @short.ToString(_format, numberFormatInfo),
            float @float => @float.ToString(_format, numberFormatInfo),
            double @double =>  @double.ToString(_format, numberFormatInfo),
            decimal @decimal => @decimal.ToString(_format, numberFormatInfo),
            _ => null
            };
    }

    protected override void OnParametersSet()
    {
        if (Value is null)
        {
            _stringValue = null;
        }
    }

}